What is NumPy?
NumPy stands for ‘Numerical Python’ or ‘Numeric Python’.

It is an open source module of Python which provides fast mathematical computation on arrays and matrices.

NumPy provides the essential multi-dimensional array-oriented computing functionalities designed for high-level mathematical functions and scientific computation.

import numpy as np
the main object of numpy is a homogeneous multidimensional array

It can also be referred as table of elements (which are usually numbers)

In Numpy object, the dimensions are usually referred as axes and the no. of axes are called as rank.

the class of any numpy array object is ndarray

# creating a numpy array

a = np.array([1,2,3]) # from list
type(a)
numpy.ndarray
b = np.array((4,5,6)) # from tuple
type(b)
numpy.ndarray
np.array([(1.5,2,3), (4,5,6)]) # multi-dimensional
array([[1.5, 2. , 3. ],
       [4. , 5. , 6. ]])
# numpy array of all ones

np.ones(shape=(3,4),dtype='int16')
array([[1, 1, 1, 1],
       [1, 1, 1, 1],
       [1, 1, 1, 1]], dtype=int16)
np.ones((2,3), dtype='int64')
array([[1, 1, 1],
       [1, 1, 1]], dtype=int64)
# numpy array created from  a range skipping at fixed intervals

np.arange(10, 40, 5)
array([10, 15, 20, 25, 30, 35])
np.arange(0, 3, 0.4)
array([0. , 0.4, 0.8, 1.2, 1.6, 2. , 2.4, 2.8])
np.arange(20)
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19])
# numpy array created from a range by specifying the no. of elements you want within these range-numbers

np.linspace(0, 2, 9)     # 9 numbers from 0 to 2
array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])
some basic attributes
ndarray.ndim
the number of axes (dimensions) of the array.

ndarray.shape
the dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For a matrix with n rows and m columns, shape will be (n,m). The length of the shape tuple is therefore the number of axes, ndim.

ndarray.size
the total number of elements of the array. This is equal to the product of the elements of shape.

ndarray.dtype
an object describing the type of the elements in the array. One can create or specify dtype’s using standard Python types. Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.

ndarray.itemsize
the size in bytes of each element of the array. For example, an array of elements of type float64 has itemsize 8 (=64/8), while one of type complex32 has itemsize 4 (=32/8). It is equivalent to ndarray.dtype.itemsize.

ndarray.data
the buffer containing the actual elements of the array. Normally, we won’t need to use this attribute because we will access the elements in an array using indexing facilities.

a = np.arange(15).reshape(3, 5)
a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
a.ndim
2
a.shape
(3, 5)
a.size
15
a.dtype
dtype('int32')
a.itemsize
4
a.data
<memory at 0x000001C01DFE0990>
Basic Operations
Arithmetic operators on arrays apply elementwise.

a = np.array( [20,30,40,50] )
b = np.arange( 4 )
b
array([0, 1, 2, 3])
c = a-b
c
array([20, 29, 38, 47])
b**2
array([0, 1, 4, 9], dtype=int32)
10*np.sin(a)
array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])
A = np.array( [[1,1],
               [0,1]] )
B = np.array( [[2,0],
               [3,4]] )
A * B       # element-wise multiplication
array([[2, 0],
       [0, 4]])
A.dot(B)    # matrix multiplication
array([[5, 4],
       [3, 4]])
# create numpy array out of random numbers within a range

np.random.rand(3,4)
array([[0.53400037, 0.66987026, 0.09022131, 0.04282964],
       [0.09359314, 0.55193121, 0.46158095, 0.34598324],
       [0.54335135, 0.58483085, 0.95997047, 0.01290935]])
* slicing dicing and index is pretty much the same as with regular python arrays(lists)
Why Numpy array over regular Python arrays?
# 1. If you assign a single value to a ndarray slice, it is copied across the whole slice
# numpy array
a = np.array([1, 2, 5, 7, 8])

a[1:3] = 29

a
array([ 1, 29, 29,  7,  8])
# python array

b = [1, 2, 5, 7, 8]

b[1:3] = 24
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-34-6f62653850fe> in <module>
      3 b = [1, 2, 5, 7, 8]
      4 
----> 5 b[1:3] = 24

TypeError: can only assign an iterable
So, it is easier to assign values to a slice of an array in a NumPy array as compared to a normal array wherein it may have to be done using loops.

# 2. ndarray slices are actually views on the same data buffer. 
#    If you modify it, it is going to modify the original ndarray as well.
# numpy array

a = np.array([1,2,5,7,8])
a_slice = a[1:5]
a_slice[1] = 100
a
array([  1,   2, 100,   7,   8])
original array also modified.

if you don't want this to happen, create copy using .copy() method

another_slice = a[1:5].copy()
another_slice[1] = 29
print(another_slice)
print(a)
[2, 29, 7, 8]
[1, 2, 5, 7, 8]
# regular array

a = [1,2,5,7,8]
b = a[1:5]
b[1] = 22
print(b)
print(a)
[2, 22, 7, 8]
[1, 2, 5, 7, 8]
 
What is Pandas?
Pandas is one of the most widely used python libraries in data science.

It provides high-performance, easy to use structures and data analysis tools.

Unlike NumPy library which provides objects for multi-dimensional arrays,
Pandas provides in-memory 2d table object called Dataframe.
It is like a spreadsheet with column names and row labels.

import pandas as pd
2 types of data structures in pandas are:

Series objects: 1D array, similar to a column in a spreadsheet
DataFrame objects: 2D table, similar to a spreadsheet

Pandas dataframe object represents a spreadsheet with cell values, column names, and row index labels.

Dataframe can be visualized as dictionaries of Series.
Dataframe rows and columns are simple and intuitive to access.

Pandas also provide SQL-like functionality to filter, and can also sort rows based on conditions.

people_dict = { "weight": pd.Series([68, 83, 112],index=["alice", "bob", "charles"]),
               "birthyear": pd.Series([1984, 1985, 1992], index=["bob", "alice", "charles"]),
               "children": pd.Series([0, 3], index=["charles", "bob"]),
               "hobby": pd.Series(["Biking", "Dancing"], index=["alice", "bob"]),}

people = pd.DataFrame(people_dict)
people
weight	birthyear	children	hobby
alice	68	1985	NaN	Biking
bob	83	1984	3.0	Dancing
charles	112	1992	0.0	NaN
# conditional indexing/slicing

people[people["birthyear"] < 1990]
weight	birthyear	children	hobby
alice	68	1985	NaN	Biking
bob	83	1984	3.0	Dancing
# selection by label

people.loc[people['birthyear'] < 1990, ['weight','birthyear','children']]
weight	birthyear	children
alice	68	1985	NaN
bob	83	1984	3.0
basic attributes of dataframe
head(): returns the top 5 rows in the dataframe object

tail(): returns the bottom 5 rows in the dataframe

info(): prints the summary of the dataframe

describe(): gives a nice overview of the main aggregated values over each column

isnull() / isna() : finding null or NaN values

shape(): (rows, columns)

columns(): columns of dataframe

count(): no. of non-NA values; otherwise use len() to get full length of DF

unique() : unique elements in pd.series

value_counts(): count of each type of element in dataframe
